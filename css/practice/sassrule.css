@charset "UTF-8";
/*可以通过！default来申明默认值、导入过程中如果声明了、就会被覆盖，用于一些属性的订制*/
/*圆角混合器*/
/*去项目符号*/
/*链接-color设置*/
/*链接-color设置，参数有默认值*/
/*像mixmi 传递片段*/
/*本篇为sass 规则的演练样式*/
/*SASS 约定_开头的sass文件为导入文件、不单独编译出css文件*/
.wrap {
  border: 1px solid #eeeeee; }

/*导入片段*/
.nexttest .shareTEST {
  margin: auto; }

/*混合器*/
.notice {
  background: #cccccc;
  color: #ffffff;
  -webkit-border-radius: 5px;
  -moz-border-radius: 5px;
  border-radius: 5px; }

/*含嵌套规则的混合器*/
ul.plain {
  color: #ffffff;
  background: #cccccc;
  list-style: none; }
  ul.plain li {
    list-style-image: none;
    list-style-type: none;
    margin-left: 0; }

/*带参数的混合器*/
a {
  color: #0000ff; }
  a:hover {
    color: #ff0000; }
  a:visited {
    color: #00ff00; }

/*传值时，可以带上定义字段*/
a.test {
  color: #00ff00; }
  a.test:hover {
    color: #0000ff; }
  a.test:visited {
    color: #cccccc; }

/*调用有默认参数*/
a.test2 {
  color: #ff0000; }
  a.test2:hover {
    color: #ff0000; }
  a.test2:visited {
    color: #0000ff; }

/*继承*/
.error, .seriousError {
  border: 1px solid #ff0000;
  background: #fdd; }
  .error a, .seriousError a {
    color: #00ff00; }
    .error a:hover, .seriousError a:hover {
      color: #00ff00; }
    .error a:visited, .seriousError a:visited {
      color: #0000ff; }
  h1 .error, h1 .seriousError {
    color: #ffffff;
    line-height: 16px;
    font-size: 16px; }
  h1 {
    color: #0000ff; }

.seriousError {
  border-width: 3px; }

/*参数数量可变的mixin*/
.container {
  box-shadow: 0px 1px 2px #333, 2px 3px 4px #ccc; }

/*向mixmin 传递片段*/
.button-green {
  font-size: 1em;
  padding: 0.5em 1em;
  text-decoration: none;
  color: #ffffff;
  background: #00ff00; }

/*变量作用域和内容片段*/
/**
一个内容片段传进mixin 中时，作用域是在定义他的地方
*/
.green-button {
  color: #ff0000;
  background: #00ff00;
  /*该color的作用域是定义的地方，即$color 取 外层定义$green,而不会是 $white*/
  border: 1px solid #cccccc; }

/*
那么到底extend 和mixin 用哪个比较好？什么情况下用比较适合？

*/
.button, .button1, .button2 {
  background: #0000ff; }

.button3 {
  background: #00ff00; }

.button4 {
  background: #00ff00; }

/*
1. extend 能生成DRY式的代码，体积较小，但是 mixin 可以传参数，足够灵活。
2. extend 生成的代码更倾向于 样式和选择器之间关系比较紧密的时候。
3. 大多数情况还是mixin 用的更多。



*/
